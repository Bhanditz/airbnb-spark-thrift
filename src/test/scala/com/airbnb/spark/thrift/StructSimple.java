/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.airbnb.spark.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-21")
public class StructSimple implements org.apache.thrift.TBase<StructSimple, StructSimple._Fields>, java.io.Serializable, Cloneable, Comparable<StructSimple> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StructSimple");

  private static final org.apache.thrift.protocol.TField ID16_FIELD_DESC = new org.apache.thrift.protocol.TField("id16", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ID32_FIELD_DESC = new org.apache.thrift.protocol.TField("id32", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ID64_FIELD_DESC = new org.apache.thrift.protocol.TField("id64", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BIN1_FIELD_DESC = new org.apache.thrift.protocol.TField("bin1", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField B1_FIELD_DESC = new org.apache.thrift.protocol.TField("b1", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField D1_FIELD_DESC = new org.apache.thrift.protocol.TField("d1", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STR1_FIELD_DESC = new org.apache.thrift.protocol.TField("str1", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField L1_FIELD_DESC = new org.apache.thrift.protocol.TField("l1", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField M1_FIELD_DESC = new org.apache.thrift.protocol.TField("m1", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField S1_FIELD_DESC = new org.apache.thrift.protocol.TField("s1", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField F1_FIELD_DESC = new org.apache.thrift.protocol.TField("f1", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField FOO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fooList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField FOO_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("fooMap", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField OPTION_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("option_str", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StructSimpleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StructSimpleTupleSchemeFactory());
  }

  public short id16; // required
  public int id32; // required
  public long id64; // required
  public ByteBuffer bin1; // required
  public boolean b1; // required
  public double d1; // required
  public String str1; // required
  public List<Long> l1; // required
  public Map<String,Boolean> m1; // required
  public Set<Double> s1; // required
  public Foo f1; // required
  public List<Foo> fooList; // required
  public Map<String,Foo> fooMap; // required
  public String option_str; // optional
  public TestEnum e; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID16((short)1, "id16"),
    ID32((short)2, "id32"),
    ID64((short)3, "id64"),
    BIN1((short)4, "bin1"),
    B1((short)5, "b1"),
    D1((short)6, "d1"),
    STR1((short)7, "str1"),
    L1((short)8, "l1"),
    M1((short)9, "m1"),
    S1((short)10, "s1"),
    F1((short)11, "f1"),
    FOO_LIST((short)12, "fooList"),
    FOO_MAP((short)13, "fooMap"),
    OPTION_STR((short)14, "option_str"),
    E((short)15, "e");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID16
          return ID16;
        case 2: // ID32
          return ID32;
        case 3: // ID64
          return ID64;
        case 4: // BIN1
          return BIN1;
        case 5: // B1
          return B1;
        case 6: // D1
          return D1;
        case 7: // STR1
          return STR1;
        case 8: // L1
          return L1;
        case 9: // M1
          return M1;
        case 10: // S1
          return S1;
        case 11: // F1
          return F1;
        case 12: // FOO_LIST
          return FOO_LIST;
        case 13: // FOO_MAP
          return FOO_MAP;
        case 14: // OPTION_STR
          return OPTION_STR;
        case 15: // E
          return E;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID16_ISSET_ID = 0;
  private static final int __ID32_ISSET_ID = 1;
  private static final int __ID64_ISSET_ID = 2;
  private static final int __B1_ISSET_ID = 3;
  private static final int __D1_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OPTION_STR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID16, new org.apache.thrift.meta_data.FieldMetaData("id16", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ID32, new org.apache.thrift.meta_data.FieldMetaData("id32", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID64, new org.apache.thrift.meta_data.FieldMetaData("id64", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIN1, new org.apache.thrift.meta_data.FieldMetaData("bin1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.B1, new org.apache.thrift.meta_data.FieldMetaData("b1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.D1, new org.apache.thrift.meta_data.FieldMetaData("d1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STR1, new org.apache.thrift.meta_data.FieldMetaData("str1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.L1, new org.apache.thrift.meta_data.FieldMetaData("l1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.M1, new org.apache.thrift.meta_data.FieldMetaData("m1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.S1, new org.apache.thrift.meta_data.FieldMetaData("s1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.F1, new org.apache.thrift.meta_data.FieldMetaData("f1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Foo")));
    tmpMap.put(_Fields.FOO_LIST, new org.apache.thrift.meta_data.FieldMetaData("fooList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Foo"))));
    tmpMap.put(_Fields.FOO_MAP, new org.apache.thrift.meta_data.FieldMetaData("fooMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Foo"))));
    tmpMap.put(_Fields.OPTION_STR, new org.apache.thrift.meta_data.FieldMetaData("option_str", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "TestEnum")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StructSimple.class, metaDataMap);
  }

  public StructSimple() {
  }

  public StructSimple(
    short id16,
    int id32,
    long id64,
    ByteBuffer bin1,
    boolean b1,
    double d1,
    String str1,
    List<Long> l1,
    Map<String,Boolean> m1,
    Set<Double> s1,
    Foo f1,
    List<Foo> fooList,
    Map<String,Foo> fooMap,
    TestEnum e)
  {
    this();
    this.id16 = id16;
    setId16IsSet(true);
    this.id32 = id32;
    setId32IsSet(true);
    this.id64 = id64;
    setId64IsSet(true);
    this.bin1 = org.apache.thrift.TBaseHelper.copyBinary(bin1);
    this.b1 = b1;
    setB1IsSet(true);
    this.d1 = d1;
    setD1IsSet(true);
    this.str1 = str1;
    this.l1 = l1;
    this.m1 = m1;
    this.s1 = s1;
    this.f1 = f1;
    this.fooList = fooList;
    this.fooMap = fooMap;
    this.e = e;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StructSimple(StructSimple other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id16 = other.id16;
    this.id32 = other.id32;
    this.id64 = other.id64;
    if (other.isSetBin1()) {
      this.bin1 = org.apache.thrift.TBaseHelper.copyBinary(other.bin1);
    }
    this.b1 = other.b1;
    this.d1 = other.d1;
    if (other.isSetStr1()) {
      this.str1 = other.str1;
    }
    if (other.isSetL1()) {
      List<Long> __this__l1 = new ArrayList<Long>(other.l1);
      this.l1 = __this__l1;
    }
    if (other.isSetM1()) {
      Map<String,Boolean> __this__m1 = new HashMap<String,Boolean>(other.m1);
      this.m1 = __this__m1;
    }
    if (other.isSetS1()) {
      Set<Double> __this__s1 = new HashSet<Double>(other.s1);
      this.s1 = __this__s1;
    }
    if (other.isSetF1()) {
      this.f1 = other.f1;
    }
    if (other.isSetFooList()) {
      List<Foo> __this__fooList = new ArrayList<Foo>(other.fooList.size());
      for (Foo other_element : other.fooList) {
        __this__fooList.add(other_element);
      }
      this.fooList = __this__fooList;
    }
    if (other.isSetFooMap()) {
      Map<String,Foo> __this__fooMap = new HashMap<String,Foo>(other.fooMap.size());
      for (Map.Entry<String, Foo> other_element : other.fooMap.entrySet()) {

        String other_element_key = other_element.getKey();
        Foo other_element_value = other_element.getValue();

        String __this__fooMap_copy_key = other_element_key;

        Foo __this__fooMap_copy_value = other_element_value;

        __this__fooMap.put(__this__fooMap_copy_key, __this__fooMap_copy_value);
      }
      this.fooMap = __this__fooMap;
    }
    if (other.isSetOption_str()) {
      this.option_str = other.option_str;
    }
    if (other.isSetE()) {
      this.e = other.e;
    }
  }

  public StructSimple deepCopy() {
    return new StructSimple(this);
  }

  @Override
  public void clear() {
    setId16IsSet(false);
    this.id16 = 0;
    setId32IsSet(false);
    this.id32 = 0;
    setId64IsSet(false);
    this.id64 = 0;
    this.bin1 = null;
    setB1IsSet(false);
    this.b1 = false;
    setD1IsSet(false);
    this.d1 = 0.0;
    this.str1 = null;
    this.l1 = null;
    this.m1 = null;
    this.s1 = null;
    this.f1 = null;
    this.fooList = null;
    this.fooMap = null;
    this.option_str = null;
    this.e = null;
  }

  public short getId16() {
    return this.id16;
  }

  public StructSimple setId16(short id16) {
    this.id16 = id16;
    setId16IsSet(true);
    return this;
  }

  public void unsetId16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID16_ISSET_ID);
  }

  /** Returns true if field id16 is set (has been assigned a value) and false otherwise */
  public boolean isSetId16() {
    return EncodingUtils.testBit(__isset_bitfield, __ID16_ISSET_ID);
  }

  public void setId16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID16_ISSET_ID, value);
  }

  public int getId32() {
    return this.id32;
  }

  public StructSimple setId32(int id32) {
    this.id32 = id32;
    setId32IsSet(true);
    return this;
  }

  public void unsetId32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID32_ISSET_ID);
  }

  /** Returns true if field id32 is set (has been assigned a value) and false otherwise */
  public boolean isSetId32() {
    return EncodingUtils.testBit(__isset_bitfield, __ID32_ISSET_ID);
  }

  public void setId32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID32_ISSET_ID, value);
  }

  public long getId64() {
    return this.id64;
  }

  public StructSimple setId64(long id64) {
    this.id64 = id64;
    setId64IsSet(true);
    return this;
  }

  public void unsetId64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID64_ISSET_ID);
  }

  /** Returns true if field id64 is set (has been assigned a value) and false otherwise */
  public boolean isSetId64() {
    return EncodingUtils.testBit(__isset_bitfield, __ID64_ISSET_ID);
  }

  public void setId64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID64_ISSET_ID, value);
  }

  public byte[] getBin1() {
    setBin1(org.apache.thrift.TBaseHelper.rightSize(bin1));
    return bin1 == null ? null : bin1.array();
  }

  public ByteBuffer bufferForBin1() {
    return org.apache.thrift.TBaseHelper.copyBinary(bin1);
  }

  public StructSimple setBin1(byte[] bin1) {
    this.bin1 = bin1 == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bin1, bin1.length));
    return this;
  }

  public StructSimple setBin1(ByteBuffer bin1) {
    this.bin1 = org.apache.thrift.TBaseHelper.copyBinary(bin1);
    return this;
  }

  public void unsetBin1() {
    this.bin1 = null;
  }

  /** Returns true if field bin1 is set (has been assigned a value) and false otherwise */
  public boolean isSetBin1() {
    return this.bin1 != null;
  }

  public void setBin1IsSet(boolean value) {
    if (!value) {
      this.bin1 = null;
    }
  }

  public boolean isB1() {
    return this.b1;
  }

  public StructSimple setB1(boolean b1) {
    this.b1 = b1;
    setB1IsSet(true);
    return this;
  }

  public void unsetB1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B1_ISSET_ID);
  }

  /** Returns true if field b1 is set (has been assigned a value) and false otherwise */
  public boolean isSetB1() {
    return EncodingUtils.testBit(__isset_bitfield, __B1_ISSET_ID);
  }

  public void setB1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B1_ISSET_ID, value);
  }

  public double getD1() {
    return this.d1;
  }

  public StructSimple setD1(double d1) {
    this.d1 = d1;
    setD1IsSet(true);
    return this;
  }

  public void unsetD1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D1_ISSET_ID);
  }

  /** Returns true if field d1 is set (has been assigned a value) and false otherwise */
  public boolean isSetD1() {
    return EncodingUtils.testBit(__isset_bitfield, __D1_ISSET_ID);
  }

  public void setD1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D1_ISSET_ID, value);
  }

  public String getStr1() {
    return this.str1;
  }

  public StructSimple setStr1(String str1) {
    this.str1 = str1;
    return this;
  }

  public void unsetStr1() {
    this.str1 = null;
  }

  /** Returns true if field str1 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr1() {
    return this.str1 != null;
  }

  public void setStr1IsSet(boolean value) {
    if (!value) {
      this.str1 = null;
    }
  }

  public int getL1Size() {
    return (this.l1 == null) ? 0 : this.l1.size();
  }

  public java.util.Iterator<Long> getL1Iterator() {
    return (this.l1 == null) ? null : this.l1.iterator();
  }

  public void addToL1(long elem) {
    if (this.l1 == null) {
      this.l1 = new ArrayList<Long>();
    }
    this.l1.add(elem);
  }

  public List<Long> getL1() {
    return this.l1;
  }

  public StructSimple setL1(List<Long> l1) {
    this.l1 = l1;
    return this;
  }

  public void unsetL1() {
    this.l1 = null;
  }

  /** Returns true if field l1 is set (has been assigned a value) and false otherwise */
  public boolean isSetL1() {
    return this.l1 != null;
  }

  public void setL1IsSet(boolean value) {
    if (!value) {
      this.l1 = null;
    }
  }

  public int getM1Size() {
    return (this.m1 == null) ? 0 : this.m1.size();
  }

  public void putToM1(String key, boolean val) {
    if (this.m1 == null) {
      this.m1 = new HashMap<String,Boolean>();
    }
    this.m1.put(key, val);
  }

  public Map<String,Boolean> getM1() {
    return this.m1;
  }

  public StructSimple setM1(Map<String,Boolean> m1) {
    this.m1 = m1;
    return this;
  }

  public void unsetM1() {
    this.m1 = null;
  }

  /** Returns true if field m1 is set (has been assigned a value) and false otherwise */
  public boolean isSetM1() {
    return this.m1 != null;
  }

  public void setM1IsSet(boolean value) {
    if (!value) {
      this.m1 = null;
    }
  }

  public int getS1Size() {
    return (this.s1 == null) ? 0 : this.s1.size();
  }

  public java.util.Iterator<Double> getS1Iterator() {
    return (this.s1 == null) ? null : this.s1.iterator();
  }

  public void addToS1(double elem) {
    if (this.s1 == null) {
      this.s1 = new HashSet<Double>();
    }
    this.s1.add(elem);
  }

  public Set<Double> getS1() {
    return this.s1;
  }

  public StructSimple setS1(Set<Double> s1) {
    this.s1 = s1;
    return this;
  }

  public void unsetS1() {
    this.s1 = null;
  }

  /** Returns true if field s1 is set (has been assigned a value) and false otherwise */
  public boolean isSetS1() {
    return this.s1 != null;
  }

  public void setS1IsSet(boolean value) {
    if (!value) {
      this.s1 = null;
    }
  }

  public Foo getF1() {
    return this.f1;
  }

  public StructSimple setF1(Foo f1) {
    this.f1 = f1;
    return this;
  }

  public void unsetF1() {
    this.f1 = null;
  }

  /** Returns true if field f1 is set (has been assigned a value) and false otherwise */
  public boolean isSetF1() {
    return this.f1 != null;
  }

  public void setF1IsSet(boolean value) {
    if (!value) {
      this.f1 = null;
    }
  }

  public int getFooListSize() {
    return (this.fooList == null) ? 0 : this.fooList.size();
  }

  public java.util.Iterator<Foo> getFooListIterator() {
    return (this.fooList == null) ? null : this.fooList.iterator();
  }

  public void addToFooList(Foo elem) {
    if (this.fooList == null) {
      this.fooList = new ArrayList<Foo>();
    }
    this.fooList.add(elem);
  }

  public List<Foo> getFooList() {
    return this.fooList;
  }

  public StructSimple setFooList(List<Foo> fooList) {
    this.fooList = fooList;
    return this;
  }

  public void unsetFooList() {
    this.fooList = null;
  }

  /** Returns true if field fooList is set (has been assigned a value) and false otherwise */
  public boolean isSetFooList() {
    return this.fooList != null;
  }

  public void setFooListIsSet(boolean value) {
    if (!value) {
      this.fooList = null;
    }
  }

  public int getFooMapSize() {
    return (this.fooMap == null) ? 0 : this.fooMap.size();
  }

  public void putToFooMap(String key, Foo val) {
    if (this.fooMap == null) {
      this.fooMap = new HashMap<String,Foo>();
    }
    this.fooMap.put(key, val);
  }

  public Map<String,Foo> getFooMap() {
    return this.fooMap;
  }

  public StructSimple setFooMap(Map<String,Foo> fooMap) {
    this.fooMap = fooMap;
    return this;
  }

  public void unsetFooMap() {
    this.fooMap = null;
  }

  /** Returns true if field fooMap is set (has been assigned a value) and false otherwise */
  public boolean isSetFooMap() {
    return this.fooMap != null;
  }

  public void setFooMapIsSet(boolean value) {
    if (!value) {
      this.fooMap = null;
    }
  }

  public String getOption_str() {
    return this.option_str;
  }

  public StructSimple setOption_str(String option_str) {
    this.option_str = option_str;
    return this;
  }

  public void unsetOption_str() {
    this.option_str = null;
  }

  /** Returns true if field option_str is set (has been assigned a value) and false otherwise */
  public boolean isSetOption_str() {
    return this.option_str != null;
  }

  public void setOption_strIsSet(boolean value) {
    if (!value) {
      this.option_str = null;
    }
  }

  public TestEnum getE() {
    return this.e;
  }

  public StructSimple setE(TestEnum e) {
    this.e = e;
    return this;
  }

  public void unsetE() {
    this.e = null;
  }

  /** Returns true if field e is set (has been assigned a value) and false otherwise */
  public boolean isSetE() {
    return this.e != null;
  }

  public void setEIsSet(boolean value) {
    if (!value) {
      this.e = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID16:
      if (value == null) {
        unsetId16();
      } else {
        setId16((Short)value);
      }
      break;

    case ID32:
      if (value == null) {
        unsetId32();
      } else {
        setId32((Integer)value);
      }
      break;

    case ID64:
      if (value == null) {
        unsetId64();
      } else {
        setId64((Long)value);
      }
      break;

    case BIN1:
      if (value == null) {
        unsetBin1();
      } else {
        setBin1((ByteBuffer)value);
      }
      break;

    case B1:
      if (value == null) {
        unsetB1();
      } else {
        setB1((Boolean)value);
      }
      break;

    case D1:
      if (value == null) {
        unsetD1();
      } else {
        setD1((Double)value);
      }
      break;

    case STR1:
      if (value == null) {
        unsetStr1();
      } else {
        setStr1((String)value);
      }
      break;

    case L1:
      if (value == null) {
        unsetL1();
      } else {
        setL1((List<Long>)value);
      }
      break;

    case M1:
      if (value == null) {
        unsetM1();
      } else {
        setM1((Map<String,Boolean>)value);
      }
      break;

    case S1:
      if (value == null) {
        unsetS1();
      } else {
        setS1((Set<Double>)value);
      }
      break;

    case F1:
      if (value == null) {
        unsetF1();
      } else {
        setF1((Foo)value);
      }
      break;

    case FOO_LIST:
      if (value == null) {
        unsetFooList();
      } else {
        setFooList((List<Foo>)value);
      }
      break;

    case FOO_MAP:
      if (value == null) {
        unsetFooMap();
      } else {
        setFooMap((Map<String,Foo>)value);
      }
      break;

    case OPTION_STR:
      if (value == null) {
        unsetOption_str();
      } else {
        setOption_str((String)value);
      }
      break;

    case E:
      if (value == null) {
        unsetE();
      } else {
        setE((TestEnum)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID16:
      return Short.valueOf(getId16());

    case ID32:
      return Integer.valueOf(getId32());

    case ID64:
      return Long.valueOf(getId64());

    case BIN1:
      return getBin1();

    case B1:
      return Boolean.valueOf(isB1());

    case D1:
      return Double.valueOf(getD1());

    case STR1:
      return getStr1();

    case L1:
      return getL1();

    case M1:
      return getM1();

    case S1:
      return getS1();

    case F1:
      return getF1();

    case FOO_LIST:
      return getFooList();

    case FOO_MAP:
      return getFooMap();

    case OPTION_STR:
      return getOption_str();

    case E:
      return getE();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID16:
      return isSetId16();
    case ID32:
      return isSetId32();
    case ID64:
      return isSetId64();
    case BIN1:
      return isSetBin1();
    case B1:
      return isSetB1();
    case D1:
      return isSetD1();
    case STR1:
      return isSetStr1();
    case L1:
      return isSetL1();
    case M1:
      return isSetM1();
    case S1:
      return isSetS1();
    case F1:
      return isSetF1();
    case FOO_LIST:
      return isSetFooList();
    case FOO_MAP:
      return isSetFooMap();
    case OPTION_STR:
      return isSetOption_str();
    case E:
      return isSetE();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StructSimple)
      return this.equals((StructSimple)that);
    return false;
  }

  public boolean equals(StructSimple that) {
    if (that == null)
      return false;

    boolean this_present_id16 = true;
    boolean that_present_id16 = true;
    if (this_present_id16 || that_present_id16) {
      if (!(this_present_id16 && that_present_id16))
        return false;
      if (this.id16 != that.id16)
        return false;
    }

    boolean this_present_id32 = true;
    boolean that_present_id32 = true;
    if (this_present_id32 || that_present_id32) {
      if (!(this_present_id32 && that_present_id32))
        return false;
      if (this.id32 != that.id32)
        return false;
    }

    boolean this_present_id64 = true;
    boolean that_present_id64 = true;
    if (this_present_id64 || that_present_id64) {
      if (!(this_present_id64 && that_present_id64))
        return false;
      if (this.id64 != that.id64)
        return false;
    }

    boolean this_present_bin1 = true && this.isSetBin1();
    boolean that_present_bin1 = true && that.isSetBin1();
    if (this_present_bin1 || that_present_bin1) {
      if (!(this_present_bin1 && that_present_bin1))
        return false;
      if (!this.bin1.equals(that.bin1))
        return false;
    }

    boolean this_present_b1 = true;
    boolean that_present_b1 = true;
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (this.b1 != that.b1)
        return false;
    }

    boolean this_present_d1 = true;
    boolean that_present_d1 = true;
    if (this_present_d1 || that_present_d1) {
      if (!(this_present_d1 && that_present_d1))
        return false;
      if (this.d1 != that.d1)
        return false;
    }

    boolean this_present_str1 = true && this.isSetStr1();
    boolean that_present_str1 = true && that.isSetStr1();
    if (this_present_str1 || that_present_str1) {
      if (!(this_present_str1 && that_present_str1))
        return false;
      if (!this.str1.equals(that.str1))
        return false;
    }

    boolean this_present_l1 = true && this.isSetL1();
    boolean that_present_l1 = true && that.isSetL1();
    if (this_present_l1 || that_present_l1) {
      if (!(this_present_l1 && that_present_l1))
        return false;
      if (!this.l1.equals(that.l1))
        return false;
    }

    boolean this_present_m1 = true && this.isSetM1();
    boolean that_present_m1 = true && that.isSetM1();
    if (this_present_m1 || that_present_m1) {
      if (!(this_present_m1 && that_present_m1))
        return false;
      if (!this.m1.equals(that.m1))
        return false;
    }

    boolean this_present_s1 = true && this.isSetS1();
    boolean that_present_s1 = true && that.isSetS1();
    if (this_present_s1 || that_present_s1) {
      if (!(this_present_s1 && that_present_s1))
        return false;
      if (!this.s1.equals(that.s1))
        return false;
    }

    boolean this_present_f1 = true && this.isSetF1();
    boolean that_present_f1 = true && that.isSetF1();
    if (this_present_f1 || that_present_f1) {
      if (!(this_present_f1 && that_present_f1))
        return false;
      if (!this.f1.equals(that.f1))
        return false;
    }

    boolean this_present_fooList = true && this.isSetFooList();
    boolean that_present_fooList = true && that.isSetFooList();
    if (this_present_fooList || that_present_fooList) {
      if (!(this_present_fooList && that_present_fooList))
        return false;
      if (!this.fooList.equals(that.fooList))
        return false;
    }

    boolean this_present_fooMap = true && this.isSetFooMap();
    boolean that_present_fooMap = true && that.isSetFooMap();
    if (this_present_fooMap || that_present_fooMap) {
      if (!(this_present_fooMap && that_present_fooMap))
        return false;
      if (!this.fooMap.equals(that.fooMap))
        return false;
    }

    boolean this_present_option_str = true && this.isSetOption_str();
    boolean that_present_option_str = true && that.isSetOption_str();
    if (this_present_option_str || that_present_option_str) {
      if (!(this_present_option_str && that_present_option_str))
        return false;
      if (!this.option_str.equals(that.option_str))
        return false;
    }

    boolean this_present_e = true && this.isSetE();
    boolean that_present_e = true && that.isSetE();
    if (this_present_e || that_present_e) {
      if (!(this_present_e && that_present_e))
        return false;
      if (!this.e.equals(that.e))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id16 = true;
    list.add(present_id16);
    if (present_id16)
      list.add(id16);

    boolean present_id32 = true;
    list.add(present_id32);
    if (present_id32)
      list.add(id32);

    boolean present_id64 = true;
    list.add(present_id64);
    if (present_id64)
      list.add(id64);

    boolean present_bin1 = true && (isSetBin1());
    list.add(present_bin1);
    if (present_bin1)
      list.add(bin1);

    boolean present_b1 = true;
    list.add(present_b1);
    if (present_b1)
      list.add(b1);

    boolean present_d1 = true;
    list.add(present_d1);
    if (present_d1)
      list.add(d1);

    boolean present_str1 = true && (isSetStr1());
    list.add(present_str1);
    if (present_str1)
      list.add(str1);

    boolean present_l1 = true && (isSetL1());
    list.add(present_l1);
    if (present_l1)
      list.add(l1);

    boolean present_m1 = true && (isSetM1());
    list.add(present_m1);
    if (present_m1)
      list.add(m1);

    boolean present_s1 = true && (isSetS1());
    list.add(present_s1);
    if (present_s1)
      list.add(s1);

    boolean present_f1 = true && (isSetF1());
    list.add(present_f1);
    if (present_f1)
      list.add(f1);

    boolean present_fooList = true && (isSetFooList());
    list.add(present_fooList);
    if (present_fooList)
      list.add(fooList);

    boolean present_fooMap = true && (isSetFooMap());
    list.add(present_fooMap);
    if (present_fooMap)
      list.add(fooMap);

    boolean present_option_str = true && (isSetOption_str());
    list.add(present_option_str);
    if (present_option_str)
      list.add(option_str);

    boolean present_e = true && (isSetE());
    list.add(present_e);
    if (present_e)
      list.add(e.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(StructSimple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId16()).compareTo(other.isSetId16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id16, other.id16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId32()).compareTo(other.isSetId32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id32, other.id32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId64()).compareTo(other.isSetId64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id64, other.id64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBin1()).compareTo(other.isSetBin1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBin1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin1, other.bin1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB1()).compareTo(other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b1, other.b1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD1()).compareTo(other.isSetD1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d1, other.d1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr1()).compareTo(other.isSetStr1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str1, other.str1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetL1()).compareTo(other.isSetL1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l1, other.l1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM1()).compareTo(other.isSetM1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m1, other.m1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS1()).compareTo(other.isSetS1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s1, other.s1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF1()).compareTo(other.isSetF1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f1, other.f1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFooList()).compareTo(other.isSetFooList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFooList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fooList, other.fooList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFooMap()).compareTo(other.isSetFooMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFooMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fooMap, other.fooMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption_str()).compareTo(other.isSetOption_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option_str, other.option_str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StructSimple(");
    boolean first = true;

    sb.append("id16:");
    sb.append(this.id16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id32:");
    sb.append(this.id32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id64:");
    sb.append(this.id64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bin1:");
    if (this.bin1 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.bin1, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b1:");
    sb.append(this.b1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d1:");
    sb.append(this.d1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("str1:");
    if (this.str1 == null) {
      sb.append("null");
    } else {
      sb.append(this.str1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("l1:");
    if (this.l1 == null) {
      sb.append("null");
    } else {
      sb.append(this.l1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("m1:");
    if (this.m1 == null) {
      sb.append("null");
    } else {
      sb.append(this.m1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s1:");
    if (this.s1 == null) {
      sb.append("null");
    } else {
      sb.append(this.s1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("f1:");
    if (this.f1 == null) {
      sb.append("null");
    } else {
      sb.append(this.f1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fooList:");
    if (this.fooList == null) {
      sb.append("null");
    } else {
      sb.append(this.fooList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fooMap:");
    if (this.fooMap == null) {
      sb.append("null");
    } else {
      sb.append(this.fooMap);
    }
    first = false;
    if (isSetOption_str()) {
      if (!first) sb.append(", ");
      sb.append("option_str:");
      if (this.option_str == null) {
        sb.append("null");
      } else {
        sb.append(this.option_str);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("e:");
    if (this.e == null) {
      sb.append("null");
    } else {
      sb.append(this.e);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id16' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'id32' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'id64' because it's a primitive and you chose the non-beans generator.
    if (bin1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bin1' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'b1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'd1' because it's a primitive and you chose the non-beans generator.
    if (str1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'str1' was not present! Struct: " + toString());
    }
    if (l1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'l1' was not present! Struct: " + toString());
    }
    if (m1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'm1' was not present! Struct: " + toString());
    }
    if (s1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 's1' was not present! Struct: " + toString());
    }
    if (f1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'f1' was not present! Struct: " + toString());
    }
    if (fooList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fooList' was not present! Struct: " + toString());
    }
    if (fooMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fooMap' was not present! Struct: " + toString());
    }
    if (e == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'e' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StructSimpleStandardSchemeFactory implements SchemeFactory {
    public StructSimpleStandardScheme getScheme() {
      return new StructSimpleStandardScheme();
    }
  }

  private static class StructSimpleStandardScheme extends StandardScheme<StructSimple> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StructSimple struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.id16 = iprot.readI16();
              struct.setId16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id32 = iprot.readI32();
              struct.setId32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id64 = iprot.readI64();
              struct.setId64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BIN1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bin1 = iprot.readBinary();
              struct.setBin1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // B1
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b1 = iprot.readBool();
              struct.setB1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // D1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d1 = iprot.readDouble();
              struct.setD1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STR1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str1 = iprot.readString();
              struct.setStr1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // L1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.l1 = new ArrayList<Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.l1.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setL1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // M1
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.m1 = new HashMap<String,Boolean>(2*_map3.size);
                String _key4;
                boolean _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readBool();
                  struct.m1.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setM1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // S1
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.s1 = new HashSet<Double>(2*_set7.size);
                double _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readDouble();
                  struct.s1.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setS1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // F1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.f1 = new Foo();
              struct.f1.read(iprot);
              struct.setF1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FOO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.fooList = new ArrayList<Foo>(_list10.size);
                Foo _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new Foo();
                  _elem11.read(iprot);
                  struct.fooList.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setFooListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FOO_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.fooMap = new HashMap<String,Foo>(2*_map13.size);
                String _key14;
                Foo _val15;
                for (int _i16 = 0; _i16 < _map13.size; ++_i16)
                {
                  _key14 = iprot.readString();
                  _val15 = new Foo();
                  _val15.read(iprot);
                  struct.fooMap.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setFooMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPTION_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.option_str = iprot.readString();
              struct.setOption_strIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // E
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.e = com.airbnb.spark.thrift.TestEnum.findByValue(iprot.readI32());
              struct.setEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId16()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id16' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetId32()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id32' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetId64()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id64' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetB1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'b1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetD1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'd1' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StructSimple struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID16_FIELD_DESC);
      oprot.writeI16(struct.id16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID32_FIELD_DESC);
      oprot.writeI32(struct.id32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID64_FIELD_DESC);
      oprot.writeI64(struct.id64);
      oprot.writeFieldEnd();
      if (struct.bin1 != null) {
        oprot.writeFieldBegin(BIN1_FIELD_DESC);
        oprot.writeBinary(struct.bin1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(B1_FIELD_DESC);
      oprot.writeBool(struct.b1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D1_FIELD_DESC);
      oprot.writeDouble(struct.d1);
      oprot.writeFieldEnd();
      if (struct.str1 != null) {
        oprot.writeFieldBegin(STR1_FIELD_DESC);
        oprot.writeString(struct.str1);
        oprot.writeFieldEnd();
      }
      if (struct.l1 != null) {
        oprot.writeFieldBegin(L1_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.l1.size()));
          for (long _iter17 : struct.l1)
          {
            oprot.writeI64(_iter17);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.m1 != null) {
        oprot.writeFieldBegin(M1_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.m1.size()));
          for (Map.Entry<String, Boolean> _iter18 : struct.m1.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeBool(_iter18.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.s1 != null) {
        oprot.writeFieldBegin(S1_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, struct.s1.size()));
          for (double _iter19 : struct.s1)
          {
            oprot.writeDouble(_iter19);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.f1 != null) {
        oprot.writeFieldBegin(F1_FIELD_DESC);
        struct.f1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fooList != null) {
        oprot.writeFieldBegin(FOO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fooList.size()));
          for (Foo _iter20 : struct.fooList)
          {
            _iter20.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fooMap != null) {
        oprot.writeFieldBegin(FOO_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.fooMap.size()));
          for (Map.Entry<String, Foo> _iter21 : struct.fooMap.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            _iter21.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.option_str != null) {
        if (struct.isSetOption_str()) {
          oprot.writeFieldBegin(OPTION_STR_FIELD_DESC);
          oprot.writeString(struct.option_str);
          oprot.writeFieldEnd();
        }
      }
      if (struct.e != null) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        oprot.writeI32(struct.e.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StructSimpleTupleSchemeFactory implements SchemeFactory {
    public StructSimpleTupleScheme getScheme() {
      return new StructSimpleTupleScheme();
    }
  }

  private static class StructSimpleTupleScheme extends TupleScheme<StructSimple> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StructSimple struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.id16);
      oprot.writeI32(struct.id32);
      oprot.writeI64(struct.id64);
      oprot.writeBinary(struct.bin1);
      oprot.writeBool(struct.b1);
      oprot.writeDouble(struct.d1);
      oprot.writeString(struct.str1);
      {
        oprot.writeI32(struct.l1.size());
        for (long _iter22 : struct.l1)
        {
          oprot.writeI64(_iter22);
        }
      }
      {
        oprot.writeI32(struct.m1.size());
        for (Map.Entry<String, Boolean> _iter23 : struct.m1.entrySet())
        {
          oprot.writeString(_iter23.getKey());
          oprot.writeBool(_iter23.getValue());
        }
      }
      {
        oprot.writeI32(struct.s1.size());
        for (double _iter24 : struct.s1)
        {
          oprot.writeDouble(_iter24);
        }
      }
      struct.f1.write(oprot);
      {
        oprot.writeI32(struct.fooList.size());
        for (Foo _iter25 : struct.fooList)
        {
          _iter25.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.fooMap.size());
        for (Map.Entry<String, Foo> _iter26 : struct.fooMap.entrySet())
        {
          oprot.writeString(_iter26.getKey());
          _iter26.getValue().write(oprot);
        }
      }
      oprot.writeI32(struct.e.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetOption_str()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOption_str()) {
        oprot.writeString(struct.option_str);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StructSimple struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id16 = iprot.readI16();
      struct.setId16IsSet(true);
      struct.id32 = iprot.readI32();
      struct.setId32IsSet(true);
      struct.id64 = iprot.readI64();
      struct.setId64IsSet(true);
      struct.bin1 = iprot.readBinary();
      struct.setBin1IsSet(true);
      struct.b1 = iprot.readBool();
      struct.setB1IsSet(true);
      struct.d1 = iprot.readDouble();
      struct.setD1IsSet(true);
      struct.str1 = iprot.readString();
      struct.setStr1IsSet(true);
      {
        org.apache.thrift.protocol.TList _list27 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.l1 = new ArrayList<Long>(_list27.size);
        long _elem28;
        for (int _i29 = 0; _i29 < _list27.size; ++_i29)
        {
          _elem28 = iprot.readI64();
          struct.l1.add(_elem28);
        }
      }
      struct.setL1IsSet(true);
      {
        org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.m1 = new HashMap<String,Boolean>(2*_map30.size);
        String _key31;
        boolean _val32;
        for (int _i33 = 0; _i33 < _map30.size; ++_i33)
        {
          _key31 = iprot.readString();
          _val32 = iprot.readBool();
          struct.m1.put(_key31, _val32);
        }
      }
      struct.setM1IsSet(true);
      {
        org.apache.thrift.protocol.TSet _set34 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.s1 = new HashSet<Double>(2*_set34.size);
        double _elem35;
        for (int _i36 = 0; _i36 < _set34.size; ++_i36)
        {
          _elem35 = iprot.readDouble();
          struct.s1.add(_elem35);
        }
      }
      struct.setS1IsSet(true);
      struct.f1 = new Foo();
      struct.f1.read(iprot);
      struct.setF1IsSet(true);
      {
        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.fooList = new ArrayList<Foo>(_list37.size);
        Foo _elem38;
        for (int _i39 = 0; _i39 < _list37.size; ++_i39)
        {
          _elem38 = new Foo();
          _elem38.read(iprot);
          struct.fooList.add(_elem38);
        }
      }
      struct.setFooListIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.fooMap = new HashMap<String,Foo>(2*_map40.size);
        String _key41;
        Foo _val42;
        for (int _i43 = 0; _i43 < _map40.size; ++_i43)
        {
          _key41 = iprot.readString();
          _val42 = new Foo();
          _val42.read(iprot);
          struct.fooMap.put(_key41, _val42);
        }
      }
      struct.setFooMapIsSet(true);
      struct.e = com.airbnb.spark.thrift.TestEnum.findByValue(iprot.readI32());
      struct.setEIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.option_str = iprot.readString();
        struct.setOption_strIsSet(true);
      }
    }
  }

}

